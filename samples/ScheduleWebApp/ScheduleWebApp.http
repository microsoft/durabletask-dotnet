### Variables
@baseUrl = http://localhost:5008
@scheduleId = schedule-123

### Create a new schedule
# @name createSchedule
POST {{baseUrl}}/schedules
Content-Type: application/json

{
    "id": "{{scheduleId}}",
    "orchestrationName": "CacheClearingOrchestrator",
    "input": "{{scheduleId}}",
    "interval": "00:00:10"
}

### Get a specific schedule by ID
# Note: This endpoint can be used to verify the schedule was created
# The ID in the URL should match the id used in create request
GET {{baseUrl}}/schedules/{{scheduleId}}

### List all schedules
GET {{baseUrl}}/schedules/list

### Update an existing schedule
PUT {{baseUrl}}/schedules/{{scheduleId}}
Content-Type: application/json

{
    "orchestrationName": "CacheClearingOrchestrator",
    "interval": "00:00:20"
}

### Pause a schedule
POST {{baseUrl}}/schedules/{{scheduleId}}/pause

### Resume a schedule
POST {{baseUrl}}/schedules/{{scheduleId}}/resume

### Delete a schedule
DELETE {{baseUrl}}/schedules/{{scheduleId}}

### Tips:
# - Replace the baseUrl variable if your application runs on a different port
# - The scheduleId variable can be changed to test different schedule instances
# - Time intervals use TimeSpan format (hh:mm:ss)
#   Examples:
#   - "00:00:10" = 10 seconds
#   - "00:30:00" = 30 minutes
#   - "01:00:00" = 1 hour
#   - "24:00:00" = 1 day
# - Dates are in ISO 8601 format (YYYY-MM-DDThh:mm:ssZ)
# - You can use the REST Client extension in VS Code to execute these requests
# - The @name directive allows referencing the response in subsequent requests
