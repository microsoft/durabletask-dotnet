jobs:
    - job: Build

      templateContext:
          outputs:
              - output: pipelineArtifact
                path: $(pkg_dir)
                artifact: drop
                sbomBuildDropPath: $(System.DefaultWorkingDirectory)
                sbomPackageName: 'DurableTask-Dotnet SBOM'

      variables:
        project: 'src/dirs.proj'
        bin_dir: 'out/bin'
        log_dir: 'out/log'
        pkg_dir: 'out/pkg'
        build_args: -c release -p:FileVersionRevision=$(Build.BuildId) -p:ContinuousIntegrationBuild=true
        ${{ if parameters.binlog }}:
            build_binlog: -bl:$(log_dir)/build.binlog
            pack_binlog: -bl:$(log_dir)/pack.binlog
        ${{ else }}:
            build_binlog: ''
            pack_binlog: ''

      steps:
        - checkout: self
          submodules: true

        - task: UseDotNet@2
          displayName: 'Install .NET 6 SDK (ESRP)' # This is needed for ESRP.
          inputs:
            packageType: 'sdk'
            version: '6.x'

        - task: UseDotNet@2
          displayName: 'Install .NET SDK (Build)' # This is needed for the build.
          inputs:
            packageType: 'sdk'
            useGlobalJson: true

        # Start by restoring all the dependencies. This needs to be its own task.
        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            verbosityRestore: Minimal
            projects: $(project)
            feedsToUse: config
            nugetConfigPath: nuget.config

        # Build source directory
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: build
            arguments: --no-restore $(build_args) $(build_binlog)
            projects: $(project)

        - template: ci/sign-files.yml@eng
          parameters:
            displayName: Sign assemblies
            folderPath: $(bin_dir)
            pattern: Microsoft.DurableTask.*.dll
            signType: dll

        # Packaging needs to be a separate step from build.
        # This will automatically pick up the signed DLLs.
        - task: DotNetCoreCLI@2
          displayName: Pack
          inputs:
            command: custom
            custom: pack
            arguments: --no-build $(build_args) $(pack_binlog)
            projects: $(project)

        - template: ci/sign-files.yml@eng
          parameters:
            displayName: Sign NugetPackages
            folderPath: $(pkg_dir)
            pattern: '*.nupkg'
            signType: nuget